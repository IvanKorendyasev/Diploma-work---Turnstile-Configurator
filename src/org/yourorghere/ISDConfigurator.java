/*
 * ISDConfigurator.java
 *
 * Created on 30. Juli 2008, 16:18
 */

package org.yourorghere;

import com.sun.opengl.util.Animator;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.opengl.GL;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.WindowConstants;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author cylab
 * @author mbien
 */
public class ISDConfigurator extends JFrame {

    GL gl;
    static {
        // When using a GLCanvas, we have to set the Popup-Menues to be HeavyWeight,
        // so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    
    private Animator animator;
    GLRenderer renderer = new GLRenderer();
    Reader r = new Reader();
    Reader r2 = new Reader();
    PriceCounter pc = new PriceCounter();
    Turnstile t = new Turnstile();
    Boolean initFinished = false;

    /** Creates new form MainFrame */
    public ISDConfigurator() {
        initComponents();
        setTitle("ISD");
        
        canvas.addGLEventListener(renderer);
        animator = new Animator(canvas);
        r.TopLight = false;
        r.BottomLight = false;
        r.Camera = false;
        r.WithScanner = true;
        
        r2.TopLight = false;
        r2.BottomLight = false;
        r2.Camera = false;
        r2.WithScanner = true;

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());         
        
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show){
        super.setVisible(true);
        animator.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        canvas = new GLCanvas(createGLCapabilites());
        jComboBox1 = new JComboBox();
        jComboBox2 = new JComboBox();
        jComboBox3 = new JComboBox();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jCheckBox1 = new JCheckBox();
        jCheckBox2 = new JCheckBox();
        jComboBox4 = new JComboBox();
        jLabel4 = new JLabel();
        jSlider1 = new JSlider();
        jSlider2 = new JSlider();
        jButton1 = new JButton();
        textArea1 = new TextArea();
        jComboBox6 = new JComboBox();
        jComboBox7 = new JComboBox();
        jComboBox8 = new JComboBox();
        jCheckBox3 = new JCheckBox();
        jCheckBox4 = new JCheckBox();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        jSeparator1 = new JSeparator();
        jSeparator2 = new JSeparator();
        jLabel5 = new JLabel();
        jLabel9 = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new Dimension(900, 550));
        setPreferredSize(new Dimension(975, 850));
        setResizable(false);
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jComboBox1.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        jComboBox2.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox2ItemStateChanged(evt);
            }
        });

        jComboBox3.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox3ItemStateChanged(evt);
            }
        });

        jLabel1.setText("Турникет:");

        jLabel2.setText("Считыватель:");

        jLabel3.setText("Камера:");

        jCheckBox1.setText("Нижний светофор");
        jCheckBox1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jCheckBox1StateChanged(evt);
            }
        });

        jCheckBox2.setText("Верхний светофор");
        jCheckBox2.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jCheckBox2StateChanged(evt);
            }
        });

        jComboBox4.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        jComboBox4.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox4ItemStateChanged(evt);
            }
        });

        jLabel4.setText("Сканер:");

        jSlider1.setMaximum(360);
        jSlider1.setMinimum(-360);
        jSlider1.setToolTipText("");
        jSlider1.setValue(0);
        jSlider1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jSlider2.setMaximum(360);
        jSlider2.setMinimum(-360);
        jSlider2.setOrientation(JSlider.VERTICAL);
        jSlider2.setValue(0);
        jSlider2.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jButton1.setText("Запись в файл");
        jButton1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        textArea1.setEditable(false);

        jComboBox6.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox6ItemStateChanged(evt);
            }
        });

        jComboBox7.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox7ItemStateChanged(evt);
            }
        });

        jComboBox8.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                jComboBox8ItemStateChanged(evt);
            }
        });

        jCheckBox3.setText("Нижний светофор");
        jCheckBox3.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jCheckBox3StateChanged(evt);
            }
        });

        jCheckBox4.setText("Верхний светофор");
        jCheckBox4.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jCheckBox4StateChanged(evt);
            }
        });

        jLabel6.setText("Считыватель:");

        jLabel7.setText("Камера:");

        jLabel8.setText("Сканер:");

        jLabel5.setFont(new Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Первый считыватель");

        jLabel9.setFont(new Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Второй считыватель");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addComponent(jSlider1, GroupLayout.PREFERRED_SIZE, 458, GroupLayout.PREFERRED_SIZE)
                            .addComponent(canvas, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jSlider2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(textArea1, GroupLayout.PREFERRED_SIZE, 462, GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox4, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jCheckBox2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jSeparator2)
                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(54, 54, 54)
                                        .addComponent(jComboBox7, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Alignment.TRAILING, layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(jComboBox6, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(Alignment.TRAILING, layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jComboBox8, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE))
                                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jCheckBox3)
                                                .addGap(154, 154, 154)
                                                .addComponent(jCheckBox4))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 69, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 427, GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jComboBox3, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 325, GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(canvas, GroupLayout.PREFERRED_SIZE, 450, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jCheckBox2)
                                    .addComponent(jCheckBox1))
                                .addGap(18, 18, 18)
                                .addComponent(jSeparator2, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                                .addGap(17, 17, 17)
                                .addComponent(jLabel9)
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox6, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addGap(20, 20, 20)))
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jSlider1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(ComponentPlacement.RELATED))
                            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                                    .addComponent(jComboBox8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                            .addComponent(jCheckBox3)
                            .addComponent(jCheckBox4))
                        .addGroup(layout.createParallelGroup(Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addComponent(textArea1, GroupLayout.PREFERRED_SIZE, 240, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 50, GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSlider2, GroupLayout.PREFERRED_SIZE, 478, GroupLayout.PREFERRED_SIZE)))
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider2StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        // TODO add your handling code here:
        renderer.rot1 = jSlider2.getValue();
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSlider1StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        // TODO add your handling code here:
        renderer.rot2 = -jSlider1.getValue();
    }//GEN-LAST:event_jSlider1StateChanged

    private void jCheckBox1StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jCheckBox1StateChanged
        // TODO add your handling code here:
        r.BottomLight = jCheckBox1.isSelected();
        renderer.BottomLight = r.BottomLight;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
    }//GEN-LAST:event_jCheckBox1StateChanged

    private void jButton1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        renderer.write();
        //textArea1.append(renderer.OutputText);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox3ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox3ItemStateChanged
        // TODO add your handling code here:
        if (jComboBox3.getSelectedItem() != "Нет")
        {
            r.Camera = true;
            r.CameraToRead = "3D Models/Считыватели/Детали Pike-2/Камеры/" + jComboBox3.getSelectedItem().toString();
            renderer.WithCamera = r.Camera;
            renderer.CameraToRead = r.CameraToRead;
        }
        else
        {
            r.Camera = false;
            r.CameraToRead = "Нет";
            renderer.WithCamera = r.Camera;
        }
        renderer.Reread = true;
        
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
                
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/

    }//GEN-LAST:event_jComboBox3ItemStateChanged

    private void jComboBox4ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox4ItemStateChanged
        // TODO add your handling code here:
        if (jComboBox4.getSelectedItem() != "Нет")
        {
            r.WithScanner = true;
        }
        else
        {
            r.WithScanner = false;
        }
        r.Scanner = jComboBox4.getSelectedItem().toString();
        renderer.WithScanner = r.WithScanner;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/

    }//GEN-LAST:event_jComboBox4ItemStateChanged

    private void jComboBox2ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox2ItemStateChanged
        // TODO add your handling code here:
        r.ReaderToRead = "3D Models/Считыватели/" + jComboBox2.getSelectedItem().toString();
        renderer.ReaderToRead = r.ReaderToRead;
        renderer.ReaderChoice = jComboBox2.getSelectedItem().toString();
        if ("Pike-2.stl".equals(jComboBox2.getSelectedItem().toString()))
        {
            jComboBox3.setEnabled(true);
            jComboBox4.setEnabled(true);
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);
        }
        else
        {
            jComboBox3.setEnabled(false);
            jComboBox4.setEnabled(false);
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
        }
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/
        
    }//GEN-LAST:event_jComboBox2ItemStateChanged

    private void jComboBox1ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        t.TurnstileToRead = "3D Models/Турникеты/" + jComboBox1.getSelectedItem().toString();
        t.SupportToRead = "3D Models/Считыватели/Детали Pike-2/Стойка " + jComboBox1.getSelectedItem().toString();
        renderer.TurnstileToRead = t.TurnstileToRead;
        renderer.SupportToRead = t.SupportToRead;
        renderer.Support2ToRead = t.SupportToRead;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/

    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jCheckBox2StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jCheckBox2StateChanged
        // TODO add your handling code here:
        r.TopLight = jCheckBox2.isSelected();
        renderer.TopLight = r.TopLight;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
    }//GEN-LAST:event_jCheckBox2StateChanged

    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        File[] Readers = new File("3D Models/Считыватели").listFiles();
        r.ReaderToRead = Readers[0].getName();
        r2.ReaderToRead = Readers[0].getName();
        for (File file : Readers) 
        {
            if (file.isFile())
            {
                jComboBox2.addItem(file.getName());
                jComboBox6.addItem(file.getName());
            }
        }
        
        File[] Turnstiles = new File("3D Models/Турникеты").listFiles();
        t.TurnstileToRead = Turnstiles[0].getName();
        for (File files : Turnstiles)
        {
            if (files.isFile())
            {
                  jComboBox1.addItem(files.getName());
            }    
        }

        jComboBox4.addItem("2D");
        jComboBox4.addItem("2D просмотр с экрaна мобильных устройств");
        jComboBox4.addItem("Нет");
        jComboBox8.addItem("2D");
        jComboBox8.addItem("2D просмотр с экрaна мобильных устройств");
        jComboBox8.addItem("Нет");
        
        jComboBox3.addItem("Нет");
        jComboBox7.addItem("Нет");
        File[] Cameras = new File("3D Models/Считыватели/Детали Pike-2/Камеры").listFiles();
        r.CameraToRead = "Нет";
        r2.CameraToRead = "Нет";
        for (File file :  Cameras)
        {
            if (file.isFile())
            {
                jComboBox3.addItem(file.getName());
                jComboBox7.addItem(file.getName());
            }    
        }
        
         initFinished = true;

         if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        
            //textArea1.append(renderer.OutputText);
    }//GEN-LAST:event_formWindowOpened

    private void jComboBox6ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox6ItemStateChanged
        // TODO add your handling code here:
        r2.ReaderToRead = "3D Models/Считыватели/" + jComboBox6.getSelectedItem().toString();
        renderer.Reader2ToRead = r2.ReaderToRead;
        renderer.Reader2Choice = jComboBox6.getSelectedItem().toString();
        if ("Pike-2.stl".equals(jComboBox6.getSelectedItem().toString()))
        {
            jComboBox3.setEnabled(true);
            jComboBox4.setEnabled(true);
            jCheckBox1.setEnabled(true);
            jCheckBox2.setEnabled(true);
            jComboBox7.setEnabled(true);
            jComboBox8.setEnabled(true);
            jCheckBox3.setEnabled(true);
            jCheckBox4.setEnabled(true);
        }
        else
        {
            jComboBox3.setEnabled(false);
            jComboBox4.setEnabled(false);
            jCheckBox1.setEnabled(false);
            jCheckBox2.setEnabled(false);
            jComboBox7.setEnabled(false);
            jComboBox8.setEnabled(false);
            jCheckBox3.setEnabled(false);
            jCheckBox4.setEnabled(false);
        }
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/
    }//GEN-LAST:event_jComboBox6ItemStateChanged

    private void jComboBox7ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox7ItemStateChanged
        // TODO add your handling code here:
        if (jComboBox7.getSelectedItem() != "Нет")
        {
            r2.Camera = true;
            r2.CameraToRead = "3D Models/Считыватели/Детали Pike-2/Камеры/" + jComboBox7.getSelectedItem().toString();
            renderer.WithCamera2 = r2.Camera;
            renderer.Camera2ToRead = r2.CameraToRead;
        }
        else
        {
            r2.Camera = false;
            renderer.WithCamera2 = r2.Camera;
        }
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/
    }//GEN-LAST:event_jComboBox7ItemStateChanged

    private void jComboBox8ItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_jComboBox8ItemStateChanged
        // TODO add your handling code here:
        if (jComboBox8.getSelectedItem() != "Нет")
        {
            r2.WithScanner = true;
        }
        else
        {
            r2.WithScanner = false;
        }
        r2.Scanner = jComboBox8.getSelectedItem().toString();
        renderer.WithScanner2 = r2.WithScanner;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
        /*if (initFinished)
        {
        textArea1.setText(null);
        textArea1.append("Турникет: "+jComboBox1.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        textArea1.append("Считыватель: "+jComboBox2.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        if ("Нет".equals(jComboBox3.getSelectedItem().toString()))
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+"\n");
        }
        else
        {
            textArea1.append("Камера: "+jComboBox3.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }        
        textArea1.append("Тип сканера: "+jComboBox4.getSelectedItem().toString()+ " - 300000 руб."+"\n");
        }*/
    }//GEN-LAST:event_jComboBox8ItemStateChanged

    private void jCheckBox3StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jCheckBox3StateChanged
        // TODO add your handling code here:
        r2.BottomLight = jCheckBox3.isSelected();
        renderer.BottomLight2 = r2.BottomLight;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
    }//GEN-LAST:event_jCheckBox3StateChanged

    private void jCheckBox4StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jCheckBox4StateChanged
        // TODO add your handling code here:
        r2.TopLight = jCheckBox4.isSelected();
        renderer.TopLight2 = r2.TopLight;
        renderer.Reread = true;
        if (initFinished)
        {
            textArea1.setText(pc.GetPriceInfo(t, r, r2));
        }
    }//GEN-LAST:event_jCheckBox4StateChanged

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {
        
        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);
        
        return capabilities;
    }
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        // Run this in the AWT event thread to prevent deadlocks and race conditions
        EventQueue.invokeLater(new Runnable() {
            public void run() {

                // switch to system l&f for native font rendering etc.
                try{
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                }catch(Exception ex) {
                    Logger.getLogger(getClass().getName()).log(Level.INFO, "can not enable system look and feel", ex);
                }

                ISDConfigurator frame = new ISDConfigurator();
                frame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GLCanvas canvas;
    private JButton jButton1;
    private JCheckBox jCheckBox1;
    private JCheckBox jCheckBox2;
    private JCheckBox jCheckBox3;
    private JCheckBox jCheckBox4;
    private JComboBox jComboBox1;
    private JComboBox jComboBox2;
    private JComboBox jComboBox3;
    private JComboBox jComboBox4;
    private JComboBox jComboBox6;
    private JComboBox jComboBox7;
    private JComboBox jComboBox8;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JSeparator jSeparator1;
    private JSeparator jSeparator2;
    private JSlider jSlider1;
    private JSlider jSlider2;
    private TextArea textArea1;
    // End of variables declaration//GEN-END:variables

}
